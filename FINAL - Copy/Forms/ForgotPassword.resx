<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="Exit.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>